# a tutorial example based on T-Drive dataset
import os
import sys
print(os.getcwd())

from common.road_network import load_rn_shp
from common.trajectory import Trajectory, store_traj_file, parse_traj_file,store_traj_file_mm_tdrive
from common.trajectory import STPoint
from noise_filtering import STFilter, HeuristicFilter
from segmentation import TimeIntervalSegmentation, StayPointSegmentation
from map_matching.hmm.hmm_map_matcher import TIHMMMapMatcher
from common.mbr import MBR
from datetime import datetime
import os
from tqdm import tqdm
import argparse
from statistics import statistics



'''
def parse_tdrive(filename, tdrive_root_dir):
    oid = filename.replace('.txt', '')
    with open(os.path.join(tdrive_root_dir, filename), 'r') as f:
        pt_list = []
        for line in f.readlines():
            attrs = line.strip('\n').split(',')
            lat = float(attrs[3])
            lng = float(attrs[2])
            time = datetime.strptime(attrs[1], '%Y-%m-%d %H:%M:%S')
            pt_list.append(STPoint(lat, lng, time))
    if len(pt_list) > 1:
        return Trajectory(oid, 0, pt_list)
    else:
        return None
'''

#修改
def parse_tdrive(filename, tdrive_root_dir):
    oid = filename.replace('.txt', '')
    with open(os.path.join(tdrive_root_dir, filename), 'r') as f:
        pt_list = []
        for i, line in enumerate(f.readlines()):
            # Skip the first line
            if i == 0:
                continue

            attrs = line.strip('\n').split(',')
            lat = float(attrs[3])
            lng = float(attrs[2])
            time = datetime.strptime(attrs[1], '%Y-%m-%d %H:%M:%S')
            pt_list.append(STPoint(lat, lng, time))

    if len(pt_list) > 1:
        return Trajectory(oid, 0, pt_list)
    else:
        return None


def do_clean(raw_traj, filters, segmentations):
    clean_traj = raw_traj
    for filter in filters:
        clean_traj = filter.filter(clean_traj)
        if clean_traj is None:
            return []
    clean_traj_list = [clean_traj]
    for seg in segmentations:
        tmp_clean_traj_list = []
        for clean_traj in clean_traj_list:
            segment_trajs = seg.segment(clean_traj)
            tmp_clean_traj_list.extend(segment_trajs)
        clean_traj_list = tmp_clean_traj_list
    return clean_traj_list


def clean_tdrive(tdrive_root_dir, clean_traj_dir):
    start_time = datetime(2018, 11, 1)
    end_time = datetime(2018, 11, 3)
    mbr = MBR(30.6, 104.02, 30.78, 104.15)
    st_filter = STFilter(mbr, start_time, end_time)
    heuristic_filter = HeuristicFilter(max_speed=35)
    filters = [st_filter, heuristic_filter]
    ti_seg = TimeIntervalSegmentation(max_time_interval_min=6)
    sp_seg = StayPointSegmentation(dist_thresh_meter=100, max_stay_time_min=15)
    segs = [ti_seg, sp_seg]
    for filename in tqdm(os.listdir(tdrive_root_dir)):
        raw_traj = parse_tdrive(filename, tdrive_root_dir)
        if raw_traj is None:
            continue
        clean_trajs = do_clean(raw_traj, filters, segs)
        if len(clean_trajs) > 0:
            store_traj_file_mm_tdrive(clean_trajs, os.path.join(clean_traj_dir, filename))


def mm_tdrive(clean_traj_dir, mm_traj_dir, rn_path):
    rn = load_rn_shp(rn_path, is_directed=True)
    map_matcher = TIHMMMapMatcher(rn)
    all_trajs = []
    for filename in tqdm(os.listdir(clean_traj_dir)):
        clean_trajs = parse_traj_file(os.path.join(clean_traj_dir, filename))
        mm_trajs = [map_matcher.match(clean_traj) for clean_traj in clean_trajs]
        #print("mm_trajs",mm_trajs.pt_list)
        #store_traj_file(mm_trajs, os.path.join(mm_traj_dir, filename), traj_type='mm')
        all_trajs.extend(mm_trajs)
    # 将所有处理过的轨迹数据保存到同一个文件
    #os.path.join(mm_traj_dir, "ALL_Traj.csv") 存放所有的轨迹数据,
    #os.path.join(mm_traj_dir, "TrajID_Map.csv") 存放轨迹数据和统计信息的字典
    # print("all_trajs",all_trajs)
    store_traj_file_mm_tdrive(all_trajs, os.path.join(mm_traj_dir, "ALL_Traj.csv"),os.path.join(mm_traj_dir, "TrajID_Map.csv"), traj_type='mm')
    

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--tdrive_root_dir', help='the directory of the TDrive dataset')
    parser.add_argument('--clean_traj_dir', help='the directory of the cleaned trajectories')
    parser.add_argument('--rn_path', help='the road network data path generated by osm2rn')
    parser.add_argument('--mm_traj_dir', help='the directory of the map-matched trajectories')
    parser.add_argument('--phase', help='the preprocessing phase [clean,mm,stat]')

    opt = parser.parse_args()
    print(opt)

    if opt.phase == 'clean':
        clean_tdrive(opt.tdrive_root_dir, opt.clean_traj_dir)
    elif opt.phase == 'mm':
        mm_tdrive(opt.clean_traj_dir, opt.mm_traj_dir, opt.rn_path)
    elif opt.phase == 'stat':
        statistics(opt.clean_traj_dir)
    else:
        raise Exception('unknown phase')
